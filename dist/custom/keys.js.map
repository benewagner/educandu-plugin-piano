{
  "version": 3,
  "sources": ["../../src/custom/keys.js"],
  "sourcesContent": ["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { EXERCISE_TYPES } from './constants.js';\r\n\r\nconst getStyle = (keyMidiValue, midiValueSequence, colors, answerMidiValueSequence, exerciseType, canShowSolution) => {\r\n\r\n  if (!midiValueSequence) {\r\n    return null;\r\n  }\r\n\r\n  const indicationMidiValue = midiValueSequence ? midiValueSequence[0] : null;\r\n  const isIndicationKey = keyMidiValue === indicationMidiValue;\r\n\r\n  // In noteSequence mode, except for indication key, keys don't need to be styled on render because of abcNotation\r\n  if (exerciseType === EXERCISE_TYPES.noteSequence) {\r\n    if (isIndicationKey) {\r\n      return { backgroundColor: colors.activeKey };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const style = {};\r\n  const isSolutionKey = midiValueSequence.includes(keyMidiValue);\r\n  const isAnswerKey = answerMidiValueSequence.includes(keyMidiValue);\r\n\r\n  if (isSolutionKey && canShowSolution) {\r\n    style.backgroundColor = colors.correct;\r\n  }\r\n  if (isAnswerKey && !canShowSolution) {\r\n    style.backgroundColor = colors.answer;\r\n  }\r\n  if (isAnswerKey && !isSolutionKey && canShowSolution) {\r\n    style.backgroundColor = colors.wrong;\r\n  }\r\n  if (isIndicationKey) {\r\n    style.backgroundColor = colors.activeKey;\r\n    if (exerciseType === EXERCISE_TYPES.interval && midiValueSequence[0] === midiValueSequence[1] && canShowSolution) {\r\n      style.backgroundColor = colors.correct;\r\n    }\r\n  }\r\n\r\n  return style;\r\n};\r\n\r\nexport function KeyWhite(props) {\r\n\r\n  const { index,\r\n    colors,\r\n    midiValue,\r\n    exerciseType,\r\n    canShowSolution,\r\n    midiValueSequence,\r\n    updateKeyRangeSelection,\r\n    answerMidiValueSequence } = props;\r\n\r\n  return (\r\n    <div\r\n      className=\"Piano-key Piano-keyWhite\"\r\n      onClick={updateKeyRangeSelection}\r\n      data-midi-value={midiValue}\r\n      data-default-color={colors.whiteKey}\r\n      data-index={index}\r\n      style={getStyle(midiValue, midiValueSequence, colors, answerMidiValueSequence, exerciseType, canShowSolution)}\r\n      />\r\n  );\r\n}\r\n\r\nexport function KeyWhiteWithBlack(props) {\r\n\r\n  const { index,\r\n    colors,\r\n    midiValue,\r\n    exerciseType,\r\n    midiValueSequence,\r\n    canShowSolution,\r\n    updateKeyRangeSelection,\r\n    answerMidiValueSequence } = props;\r\n\r\n  return (\r\n    <div\r\n      className=\"Piano-key Piano-keyWhite\"\r\n      onClick={updateKeyRangeSelection}\r\n      data-midi-value={midiValue}\r\n      data-default-color={colors.whiteKey}\r\n      data-index={index}\r\n      style={getStyle(midiValue, midiValueSequence, colors, answerMidiValueSequence, exerciseType, canShowSolution)}\r\n      >\r\n      <div\r\n        className=\"Piano-key Piano-keyBlack\"\r\n        data-midi-value={midiValue + 1}\r\n        data-default-color={colors.blackKey}\r\n        style={getStyle(midiValue + 1, midiValueSequence, colors, answerMidiValueSequence, exerciseType, canShowSolution)}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst keyProps = {\r\n  canShowSolutionRef: PropTypes.object,\r\n  colors: PropTypes.object.isRequired,\r\n  exerciseType: PropTypes.string,\r\n  answerMidiValueSequence: PropTypes.array,\r\n  midiValue: PropTypes.number,\r\n  midiValueSequence: PropTypes.array,\r\n  updateKeyRangeSelection: PropTypes.func\r\n};\r\n\r\nconst defaultKeyProps = {\r\n  canShowSolutionRef: {},\r\n  exerciseType: '',\r\n  answerMidiValueSequence: [],\r\n  midiValue: null,\r\n  midiValueSequence: [],\r\n  updateKeyRangeSelection: () => {}\r\n};\r\n\r\nKeyWhite.propTypes = {\r\n  ...keyProps\r\n};\r\n\r\nKeyWhite.defaultKeyProps = {\r\n  ...defaultKeyProps\r\n};\r\n\r\nKeyWhiteWithBlack.propTypes = {\r\n  ...keyProps\r\n};\r\n\r\nKeyWhiteWithBlack.defaultKeyProps = {\r\n  ...defaultKeyProps\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
