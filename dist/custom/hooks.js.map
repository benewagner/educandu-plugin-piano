{
  "version": 3,
  "sources": ["../../src/custom/hooks.js"],
  "sourcesContent": ["import * as ut from './utils.js';\r\nimport * as C from './constants.js';\r\nimport id from '../educandu-code/unique-id.js';\r\nimport Logger from '@educandu/educandu/common/logger.js';\r\nimport HttpClient from '@educandu/educandu/api-clients/http-client.js';\r\nimport { useEffect, useState, useCallback, useMemo, useRef } from 'react';\r\n\r\nconst logger = new Logger(import.meta.url);\r\n\r\n// Use the Web MIDI API for checking if a MIDI device is connected\r\n// If true, store the Midi Acces Object on browser document object to be accessed by each piano on the page\r\nexport function useMidiDevice() {\r\n  const [isMidiDeviceConnected, setIsMidiDeviceConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isMidiDeviceConnected) {\r\n      return;\r\n    }\r\n    if (typeof document.midiAccessObj !== 'undefined' && document.midiAccessObj.inputs.size > 0) {\r\n      setIsMidiDeviceConnected(true);\r\n      return;\r\n    }\r\n    // Triggers if browser supports Web MIDI API, even if no MIDI device is connected\r\n    function onMIDISuccess(midiAccessObj) {\r\n      if (midiAccessObj.inputs.size > 0) {\r\n        setIsMidiDeviceConnected(true);\r\n      }\r\n      if (!document.midiAccessObj) {\r\n        document.midiAccessObj = midiAccessObj;\r\n      }\r\n    }\r\n    function onMIDIFailure(error) {\r\n      logger.error(error);\r\n    }\r\n\r\n    navigator.requestMIDIAccess().then(onMIDISuccess, onMIDIFailure);\r\n  }, [isMidiDeviceConnected]);\r\n\r\n  return isMidiDeviceConnected;\r\n}\r\n\r\n// Load the midi file defined in midi-piano-editor.js\r\nexport function useMidiData(src) {\r\n  const [midiData, setMidiData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!src || midiData) {\r\n      return;\r\n    }\r\n    const httpClient = new HttpClient();\r\n    httpClient.get(src, { responseType: 'arraybuffer', withCredentials: true })\r\n      .then(response => {\r\n        setMidiData(response.data);\r\n      });\r\n  }, [src, midiData]);\r\n\r\n  return midiData;\r\n}\r\n\r\n// Initialize midi player if midi data is loaded\r\nexport function useMidiPlayer(midiData) {\r\n  const midiPlayer = useRef(null);\r\n  const midiPlayerHandler = useRef({\r\n    handleMidiPlayerEvent: () => {},\r\n    resetAllKeyStyles: () => {},\r\n    updateActiveNotes: () => {}\r\n  });\r\n\r\n  if (!midiPlayer.current && midiData) {\r\n    import('midi-player-js')\r\n      .then(module => {\r\n        midiPlayer.current = new module.default.Player();\r\n        midiPlayer.current.on('midiEvent', message => {\r\n          midiPlayerHandler.current.handleMidiPlayerEvent(message);\r\n        });\r\n        midiPlayer.current.on('endOfFile', () => {\r\n          midiPlayer.current.stop();\r\n          midiPlayerHandler.current.resetAllKeyStyles();\r\n          midiPlayerHandler.current.updateActiveNotes('Reset');\r\n        });\r\n        midiPlayer.current.loadArrayBuffer(midiData);\r\n      });\r\n  }\r\n\r\n  return [midiPlayer, midiPlayerHandler];\r\n}\r\n\r\n// Initialize a Tone.js sampler used for playback of any notes\r\n// Store Sampler on browser document object so that it can be accessed by every piano on the page\r\n// Currently only piano samples being used. By including the sampleType variable it will be easy to add further samples like Harpsichord later\r\nexport function useToneJsSampler(sampleType) {\r\n  const [hasSamplerLoaded, setHasSamplerLoaded] = useState(false);\r\n  const sampler = useRef(null);\r\n\r\n  const setupToneJsSampler = useCallback(() => {\r\n    import('tone')\r\n      .then(module => {\r\n        document.toneJsSamplers[sampleType] = new module.Sampler({\r\n          urls: {\r\n            'A0': 'A0.mp3',\r\n            'C1': 'C1.mp3',\r\n            'D#1': 'Ds1.mp3',\r\n            'F#1': 'Fs1.mp3',\r\n            'A1': 'A1.mp3',\r\n            'C2': 'C2.mp3',\r\n            'D#2': 'Ds2.mp3',\r\n            'F#2': 'Fs2.mp3',\r\n            'A2': 'A2.mp3',\r\n            'C3': 'C3.mp3',\r\n            'D#3': 'Ds3.mp3',\r\n            'F#3': 'Fs3.mp3',\r\n            'A3': 'A3.mp3',\r\n            'C4': 'C4.mp3',\r\n            'D#4': 'Ds4.mp3',\r\n            'F#4': 'Fs4.mp3',\r\n            'A4': 'A4.mp3',\r\n            'C5': 'C5.mp3',\r\n            'D#5': 'Ds5.mp3',\r\n            'F#5': 'Fs5.mp3',\r\n            'A5': 'A5.mp3',\r\n            'C6': 'C6.mp3',\r\n            'D#6': 'Ds6.mp3',\r\n            'F#6': 'Fs6.mp3',\r\n            'A6': 'A6.mp3',\r\n            'C7': 'C7.mp3',\r\n            'D#7': 'Ds7.mp3',\r\n            'F#7': 'Fs7.mp3',\r\n            'A7': 'A7.mp3',\r\n            'C8': 'C8.mp3'\r\n          },\r\n          onload: () => {\r\n            setHasSamplerLoaded(true);\r\n            sampler.current = document.toneJsSamplers[sampleType];\r\n          },\r\n          baseUrl: 'https://tonejs.github.io/audio/salamander/'\r\n        }).toDestination();\r\n      });\r\n  }, [sampleType]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (document.toneJsSamplers?.[sampleType]) {\r\n      if (!hasSamplerLoaded) {\r\n        setHasSamplerLoaded(true);\r\n        sampler.current = document.toneJsSamplers[sampleType];\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (!document.toneJsSamplers) {\r\n      document.toneJsSamplers = {};\r\n    }\r\n\r\n    setupToneJsSampler();\r\n\r\n  }, [hasSamplerLoaded, setHasSamplerLoaded, sampleType, setupToneJsSampler]);\r\n\r\n  return [sampler, hasSamplerLoaded];\r\n}\r\n\r\n// Set unique pianoId which does not start with a number character for use as CSS selector in manageSiblingPianosMidiInput in piano-display.js\r\nexport function usePianoId(defaultValue) {\r\n  const [pianoId, setPianoId] = useState(defaultValue);\r\n\r\n  useEffect(() => {\r\n    const newId = `ID${id.create()}`;\r\n    setPianoId(newId);\r\n  }, []);\r\n\r\n  return pianoId;\r\n}\r\n\r\n// Generate ear training exercise data\r\nexport function useExercise(content, currentTestIndex, currentExerciseIndex) {\r\n  const currentTest = useCallback(() => content.tests[currentTestIndex], [content.tests, currentTestIndex]);\r\n\r\n  // Used for interval and noteSequence exercise modes. Chord mode has own method. NoteRange (defined with slider in editor) becomes rendered piano keyRange.\r\n  // Both noteRange and keyRange are defined with white key indices (not midi values) for first and last key. Example: For full keyRange (52 white keys), will be {first: 0, last: 51}\r\n  // Checks if noteRange is too narrow for exercise and if so widens it.\r\n  const getKeyRange = useCallback(params => {\r\n    const { intervalVectors, midiNoteNameSequence, noteRange } = params;\r\n    const test = currentTest();\r\n\r\n    let [firstKeyRangeMidiValue, lastKeyRangeMidiValue] = ut.getBorderKeyRangeMidiValues(noteRange);\r\n\r\n    [firstKeyRangeMidiValue, lastKeyRangeMidiValue] = ut.widenKeyRangeIfNeeded({ test, intervalVectors, noteRange, midiNoteNameSequence });\r\n\r\n    // Make sure widened keyRange is part of actual piano key range\r\n    [firstKeyRangeMidiValue, lastKeyRangeMidiValue] = ut.shiftKeyRangeIfNeeded(firstKeyRangeMidiValue, lastKeyRangeMidiValue);\r\n\r\n    // Make sure first and last midi value belongs to white key\r\n    firstKeyRangeMidiValue = C.WHITE_KEYS_MIDI_VALUES.includes(firstKeyRangeMidiValue) ? firstKeyRangeMidiValue : firstKeyRangeMidiValue - 1;\r\n    lastKeyRangeMidiValue = C.WHITE_KEYS_MIDI_VALUES.includes(lastKeyRangeMidiValue) ? lastKeyRangeMidiValue : lastKeyRangeMidiValue + 1;\r\n\r\n    // Convert midi values to white key indices which are needed for rendering piano\r\n    return {\r\n      first: C.WHITE_KEYS_MIDI_VALUES.indexOf(firstKeyRangeMidiValue),\r\n      last: C.WHITE_KEYS_MIDI_VALUES.indexOf(lastKeyRangeMidiValue)\r\n    };\r\n\r\n  }, [currentTest]);\r\n\r\n  const getKeyRangeForChordMode = useCallback((noteRange, chordVectors) => {\r\n    let [firstKeyRangeMidiValue, lastKeyRangeMidiValue] = ut.getBorderKeyRangeMidiValues(noteRange);\r\n\r\n    for (const chordVector of chordVectors) {\r\n      [firstKeyRangeMidiValue, lastKeyRangeMidiValue] = ut.widenKeyRangeIfNeeded({ test: currentTest(), chordVector, noteRange });\r\n    }\r\n\r\n    return {\r\n      first: C.WHITE_KEYS_MIDI_VALUES.indexOf(firstKeyRangeMidiValue),\r\n      last: C.WHITE_KEYS_MIDI_VALUES.indexOf(lastKeyRangeMidiValue)\r\n    };\r\n  }, [currentTest]);\r\n\r\n  // Get interval vectors used to generate subsequent notes in interval and noteSequence mode. Example: vector 7 is perfect fifth\r\n  const getIntervalVectors = useCallback((test, intervalCheckboxStates) => {\r\n\r\n    if (intervalCheckboxStates.all) {\r\n      return C.INTERVAL_VECTORS.all;\r\n    }\r\n\r\n    const intervalVectors = [];\r\n\r\n    for (const interval of C.INTERVAL_NAMES) {\r\n      if (typeof intervalCheckboxStates[interval].minor !== 'undefined') {\r\n        // If only white keys are used in random note sequence mode, you can not check minor or major type of interval in editor.\r\n        // In this case only minor interval type vector is included.\r\n        // If minor interval type vector leads to black key, minor interval type vector + 1 (major interval type vector) will be used to generate new note.\r\n        if (ut.usesWhiteKeysOnly(test)) {\r\n          (intervalCheckboxStates[interval].minor || intervalCheckboxStates[interval].major) && intervalVectors.push(C.INTERVAL_VECTORS[interval].minor);\r\n        } else {\r\n          intervalCheckboxStates[interval].minor && intervalVectors.push(C.INTERVAL_VECTORS[interval].minor);\r\n          intervalCheckboxStates[interval].major && intervalVectors.push(C.INTERVAL_VECTORS[interval].major);\r\n        }\r\n      } else {\r\n        intervalCheckboxStates[interval] && intervalVectors.push(C.INTERVAL_VECTORS[interval]);\r\n      }\r\n    }\r\n    return intervalVectors;\r\n  }, []);\r\n\r\n  const getSequencesForIntervalMode = useCallback((keyRange, intervalVectors) => {\r\n    const test = currentTest();\r\n    const midiValueSequence = [];\r\n    const abcNoteNameSequence = [];\r\n    const midiNoteNameSequence = [];\r\n\r\n    let indicationMidiValue = ut.getIndicationMidiValue(keyRange);\r\n    const [useVectorUpOnly, useVectorDownOnly] = ut.getVectorDirections(test);\r\n    const vector = ut.getVector(intervalVectors);\r\n    const vectorWithDirection = ut.getVectorWithDirection(vector, useVectorUpOnly, useVectorDownOnly);\r\n\r\n    let nextMidiValue = indicationMidiValue + vectorWithDirection;\r\n\r\n    if (!ut.isInRange(keyRange, nextMidiValue)) {\r\n      indicationMidiValue = ut.adjustIndicationMidiValue(keyRange, vectorWithDirection);\r\n      nextMidiValue = indicationMidiValue + vectorWithDirection;\r\n    }\r\n\r\n    if (ut.allowsLargeIntervals(test)) {\r\n      const possibleNextMidiValues = ut.getPossibleNextMidiValues(indicationMidiValue, vectorWithDirection, keyRange);\r\n      if (possibleNextMidiValues.length !== 0) {\r\n        nextMidiValue = ut.randomArrayElem(possibleNextMidiValues);\r\n      }\r\n    }\r\n\r\n    midiValueSequence.push(indicationMidiValue);\r\n    abcNoteNameSequence.push(C.ABC_NOTE_NAMES[indicationMidiValue]);\r\n    midiNoteNameSequence.push(C.MIDI_NOTE_NAMES[indicationMidiValue]);\r\n\r\n    midiValueSequence.push(nextMidiValue);\r\n    abcNoteNameSequence.push(C.ABC_NOTE_NAMES[nextMidiValue]);\r\n    midiNoteNameSequence.push(C.MIDI_NOTE_NAMES[nextMidiValue]);\r\n\r\n    return [midiValueSequence, midiNoteNameSequence, abcNoteNameSequence];\r\n  }, [currentTest]);\r\n\r\n  const getSequencesForRandomNoteSequenceMode = useCallback((keyRange, intervalVectors) => {\r\n    const test = currentTest();\r\n\r\n    const midiValueSequence = [];\r\n    const abcNoteNameSequence = [];\r\n    const midiNoteNameSequence = [];\r\n\r\n    const [indicationMidiValue, firstVector] = ut.getIndicationMidiValueAndFirstVector(test, keyRange, intervalVectors);\r\n\r\n    midiValueSequence.push(indicationMidiValue);\r\n    abcNoteNameSequence.push(C.ABC_NOTE_NAMES[indicationMidiValue]);\r\n    midiNoteNameSequence.push(C.MIDI_NOTE_NAMES[indicationMidiValue]);\r\n\r\n    let currentMidiValue = indicationMidiValue;\r\n    // - 1 since first note (indication) has already been generated\r\n    const numberOfNotes = currentTest().numberOfNotes - 1;\r\n\r\n    for (let i = 0; i < numberOfNotes; i += 1) {\r\n      const nextMidiValue = ut.getNextNoteSequenceVectorAndMidiValue(test, currentMidiValue, keyRange, intervalVectors, firstVector, i);\r\n\r\n      midiValueSequence.push(nextMidiValue);\r\n      abcNoteNameSequence.push(C.ABC_NOTE_NAMES[nextMidiValue]);\r\n      midiNoteNameSequence.push(C.MIDI_NOTE_NAMES[nextMidiValue]);\r\n\r\n      currentMidiValue = nextMidiValue;\r\n    }\r\n\r\n    return [midiValueSequence, midiNoteNameSequence, abcNoteNameSequence];\r\n  }, [currentTest]);\r\n\r\n  const getSequencesAndChordVector = useCallback((keyRange, chordVectors) => {\r\n\r\n    let midiValueSequence = [];\r\n    const [firstKeyRangeMidiValue, lastKeyRangeMidiValue] = ut.getBorderKeyRangeMidiValues(keyRange);\r\n\r\n    // In chord mode indication key is always bass note. Make sure bassNote key is in lower half of keyRange\r\n    const bassNoteMidiValue = ut.randomIntBetween(firstKeyRangeMidiValue, (firstKeyRangeMidiValue + lastKeyRangeMidiValue) / 2);\r\n    midiValueSequence.push(bassNoteMidiValue);\r\n\r\n    // Example: chordVector for dominantseventh chord is [4, 7, 10]\r\n    const chordVector = ut.randomArrayElem(chordVectors);\r\n\r\n    for (let i = 0; i < chordVector.length; i += 1) {\r\n      const nextMidiValue = ut.getNextChordMidiValue(currentTest(), bassNoteMidiValue, chordVector[i], keyRange);\r\n      midiValueSequence.push(nextMidiValue);\r\n    }\r\n\r\n    midiValueSequence = ut.sortLowToHigh(midiValueSequence);\r\n\r\n    const abcNoteNameSequence = midiValueSequence.map(value => C.ABC_NOTE_NAMES[value]);\r\n    const midiNoteNameSequence = midiValueSequence.map(value => C.MIDI_NOTE_NAMES[value]);\r\n\r\n    return [midiValueSequence, midiNoteNameSequence, abcNoteNameSequence, chordVector];\r\n  }, [currentTest]);\r\n\r\n  const getSolution = useCallback(abcNoteNameSequence => {\r\n    let solution = '';\r\n    for (const noteName of abcNoteNameSequence) {\r\n      solution += noteName;\r\n    }\r\n    return solution;\r\n  }, []);\r\n\r\n  const getChordVectors = useCallback(() => {\r\n    const chordVectors = [];\r\n    const test = currentTest();\r\n    const triadCheckboxStates = test.triadCheckboxStates;\r\n    const seventhChordCheckboxStates = test.seventhChordCheckboxStates;\r\n    const inversionCheckboxStates = test.inversionCheckboxStates;\r\n    const triads = Object.keys(triadCheckboxStates).map(key => triadCheckboxStates[key] && key).filter(elem => elem);\r\n    const seventhChords = Object.keys(seventhChordCheckboxStates).map(key => seventhChordCheckboxStates[key] && key).filter(elem => elem);\r\n    const inversions = Object.keys(inversionCheckboxStates).map(key => inversionCheckboxStates[key] && key).filter(elem => elem);\r\n\r\n    for (const inversion of inversions) {\r\n      // Filter since triad does not have third inversion like seventh chord\r\n      chordVectors.push(...triads.map(triad => C.CHORD_VECTORS.triads[triad][inversion]).filter(elem => elem));\r\n      chordVectors.push(...seventhChords.map(seventhChord => C.CHORD_VECTORS.seventhChords[seventhChord][inversion]));\r\n    }\r\n\r\n    return chordVectors;\r\n  }, [currentTest]);\r\n\r\n  const getData = useCallback(\r\n    () => {\r\n      if (content.tests.length === 0) {\r\n        return {\r\n          keyRange: content.keyRange\r\n        };\r\n      }\r\n\r\n      const test = currentTest();\r\n\r\n      if (ut.isCustomNoteSequenceExercise(test)) {\r\n        const noteSequence = currentTest().customNoteSequences[currentExerciseIndex];\r\n        const midiNoteNameSequence = noteSequence.midiNoteNameSequence;\r\n        const keyRange = getKeyRange({ midiNoteNameSequence, noteRange: noteSequence.noteRange });\r\n\r\n        return { keyRange,\r\n          midiNoteNameSequence,\r\n          clef: noteSequence.clef,\r\n          solution: noteSequence.filteredAbc,\r\n          indication: noteSequence.abcNoteNameSequence[0],\r\n          midiValueSequence: noteSequence.midiValueSequence,\r\n          abcNoteNameSequence: noteSequence.abcNoteNameSequence,\r\n          indicationMidiValue: noteSequence.midiValueSequence[0] };\r\n      }\r\n\r\n      if (ut.isRandomNoteSequenceExercise(test)) {\r\n        const intervalCheckboxStates = test.noteSequenceCheckboxStates;\r\n        const intervalVectors = getIntervalVectors(test, intervalCheckboxStates);\r\n        const keyRange = getKeyRange({ intervalVectors, noteRange: test.noteSequenceNoteRange });\r\n        const [midiValueSequence, midiNoteNameSequence, abcNoteNameSequence] = getSequencesForRandomNoteSequenceMode(keyRange, intervalVectors);\r\n        const solution = getSolution(abcNoteNameSequence);\r\n\r\n        return {\r\n          keyRange,\r\n          solution,\r\n          clef: test.clef,\r\n          midiValueSequence,\r\n          abcNoteNameSequence,\r\n          midiNoteNameSequence,\r\n          indication: abcNoteNameSequence[0],\r\n          indicationMidiValue: midiValueSequence[0]\r\n        };\r\n      }\r\n\r\n      if (ut.isIntervalExercise(test)) {\r\n        const checkboxStates = test.intervalCheckboxStates;\r\n        const intervalVectors = getIntervalVectors(test, checkboxStates);\r\n        const keyRange = getKeyRange({ intervalVectors, noteRange: test.intervalNoteRange });\r\n        const [midiValueSequence, midiNoteNameSequence, abcNoteNameSequence] = getSequencesForIntervalMode(keyRange, intervalVectors);\r\n\r\n        return {\r\n          keyRange,\r\n          midiValueSequence,\r\n          abcNoteNameSequence,\r\n          midiNoteNameSequence,\r\n          indication: abcNoteNameSequence[0],\r\n          indicationMidiValue: midiValueSequence[0]\r\n        };\r\n      }\r\n\r\n      if (ut.isChordExercise(test)) {\r\n        const chordVectors = getChordVectors();\r\n        const keyRange = getKeyRangeForChordMode(test.chordNoteRange, chordVectors);\r\n        const [midiValueSequence, midiNoteNameSequence, abcNoteNameSequence, chordVector] = getSequencesAndChordVector(keyRange, chordVectors);\r\n\r\n        return {\r\n          keyRange,\r\n          chordVector,\r\n          midiValueSequence,\r\n          abcNoteNameSequence,\r\n          midiNoteNameSequence,\r\n          indication: abcNoteNameSequence[0],\r\n          indicationMidiValue: midiValueSequence[0]\r\n        };\r\n      }\r\n      // Never runs. Here for ESLint rule consistent return\r\n      return {\r\n        keyRange: content.keyRange\r\n      };\r\n    },\r\n    [\r\n      currentTest,\r\n      getKeyRange,\r\n      getSolution,\r\n      getChordVectors,\r\n      content.keyRange,\r\n      getIntervalVectors,\r\n      currentExerciseIndex,\r\n      content.tests.length,\r\n      getKeyRangeForChordMode,\r\n      getSequencesAndChordVector,\r\n      getSequencesForIntervalMode,\r\n      getSequencesForRandomNoteSequenceMode\r\n    ]\r\n  );\r\n\r\n  const defaultData = useMemo(() => {\r\n    return {\r\n      abcNoteNameSequence: [],\r\n      keyRange: getData().keyRange,\r\n      indication: '',\r\n      solution: ''\r\n    };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // If getData was called as useState callback, server and client would generate different indicationMidiValues,\r\n  // which would result in blue indication piano key changing on page load.\r\n  const [exerciseData, setExerciseData] = useState(defaultData);\r\n\r\n  useEffect(() => {\r\n    setExerciseData(() => getData());\r\n  }, [currentTestIndex, getData]);\r\n\r\n  return exerciseData;\r\n}\r\n"],
  "mappings": "AAAA,YAAY,QAAQ;AACpB,YAAY,OAAO;AACnB,OAAO,QAAQ;AACf,OAAO,YAAY;AACnB,OAAO,gBAAgB;AACvB,SAAS,WAAW,UAAU,aAAa,SAAS,cAAc;AAElE,MAAM,SAAS,IAAI,OAAO,YAAY,GAAG;AAIlC,SAAS,gBAAgB;AAC9B,QAAM,CAAC,uBAAuB,wBAAwB,IAAI,SAAS,KAAK;AAExE,YAAU,MAAM;AACd,QAAI,uBAAuB;AACzB;AAAA,IACF;AACA,QAAI,OAAO,SAAS,kBAAkB,eAAe,SAAS,cAAc,OAAO,OAAO,GAAG;AAC3F,+BAAyB,IAAI;AAC7B;AAAA,IACF;AAEA,aAAS,cAAc,eAAe;AACpC,UAAI,cAAc,OAAO,OAAO,GAAG;AACjC,iCAAyB,IAAI;AAAA,MAC/B;AACA,UAAI,CAAC,SAAS,eAAe;AAC3B,iBAAS,gBAAgB;AAAA,MAC3B;AAAA,IACF;AACA,aAAS,cAAc,OAAO;AAC5B,aAAO,MAAM,KAAK;AAAA,IACpB;AAEA,cAAU,kBAAkB,EAAE,KAAK,eAAe,aAAa;AAAA,EACjE,GAAG,CAAC,qBAAqB,CAAC;AAE1B,SAAO;AACT;AAGO,SAAS,YAAY,KAAK;AAC/B,QAAM,CAAC,UAAU,WAAW,IAAI,SAAS,IAAI;AAE7C,YAAU,MAAM;AACd,QAAI,CAAC,OAAO,UAAU;AACpB;AAAA,IACF;AACA,UAAM,aAAa,IAAI,WAAW;AAClC,eAAW,IAAI,KAAK,EAAE,cAAc,eAAe,iBAAiB,KAAK,CAAC,EACvE,KAAK,cAAY;AAChB,kBAAY,SAAS,IAAI;AAAA,IAC3B,CAAC;AAAA,EACL,GAAG,CAAC,KAAK,QAAQ,CAAC;AAElB,SAAO;AACT;AAGO,SAAS,cAAc,UAAU;AACtC,QAAM,aAAa,OAAO,IAAI;AAC9B,QAAM,oBAAoB,OAAO;AAAA,IAC/B,uBAAuB,MAAM;AAAA,IAAC;AAAA,IAC9B,mBAAmB,MAAM;AAAA,IAAC;AAAA,IAC1B,mBAAmB,MAAM;AAAA,IAAC;AAAA,EAC5B,CAAC;AAED,MAAI,CAAC,WAAW,WAAW,UAAU;AACnC,WAAO,gBAAgB,EACpB,KAAK,YAAU;AACd,iBAAW,UAAU,IAAI,OAAO,QAAQ,OAAO;AAC/C,iBAAW,QAAQ,GAAG,aAAa,aAAW;AAC5C,0BAAkB,QAAQ,sBAAsB,OAAO;AAAA,MACzD,CAAC;AACD,iBAAW,QAAQ,GAAG,aAAa,MAAM;AACvC,mBAAW,QAAQ,KAAK;AACxB,0BAAkB,QAAQ,kBAAkB;AAC5C,0BAAkB,QAAQ,kBAAkB,OAAO;AAAA,MACrD,CAAC;AACD,iBAAW,QAAQ,gBAAgB,QAAQ;AAAA,IAC7C,CAAC;AAAA,EACL;AAEA,SAAO,CAAC,YAAY,iBAAiB;AACvC;AAKO,SAAS,iBAAiB,YAAY;AAC3C,QAAM,CAAC,kBAAkB,mBAAmB,IAAI,SAAS,KAAK;AAC9D,QAAM,UAAU,OAAO,IAAI;AAE3B,QAAM,qBAAqB,YAAY,MAAM;AAC3C,WAAO,MAAM,EACV,KAAK,YAAU;AACd,eAAS,eAAe,UAAU,IAAI,IAAI,OAAO,QAAQ;AAAA,QACvD,MAAM;AAAA,UACJ,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,OAAO;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,OAAO;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,OAAO;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,OAAO;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,OAAO;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,OAAO;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,OAAO;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,QACR;AAAA,QACA,QAAQ,MAAM;AACZ,8BAAoB,IAAI;AACxB,kBAAQ,UAAU,SAAS,eAAe,UAAU;AAAA,QACtD;AAAA,QACA,SAAS;AAAA,MACX,CAAC,EAAE,cAAc;AAAA,IACnB,CAAC;AAAA,EACL,GAAG,CAAC,UAAU,CAAC;AAEf,YAAU,MAAM;AAEd,QAAI,SAAS,iBAAiB,UAAU,GAAG;AACzC,UAAI,CAAC,kBAAkB;AACrB,4BAAoB,IAAI;AACxB,gBAAQ,UAAU,SAAS,eAAe,UAAU;AAAA,MACtD;AACA;AAAA,IACF;AAEA,QAAI,CAAC,SAAS,gBAAgB;AAC5B,eAAS,iBAAiB,CAAC;AAAA,IAC7B;AAEA,uBAAmB;AAAA,EAErB,GAAG,CAAC,kBAAkB,qBAAqB,YAAY,kBAAkB,CAAC;AAE1E,SAAO,CAAC,SAAS,gBAAgB;AACnC;AAGO,SAAS,WAAW,cAAc;AACvC,QAAM,CAAC,SAAS,UAAU,IAAI,SAAS,YAAY;AAEnD,YAAU,MAAM;AACd,UAAM,QAAQ,KAAK,GAAG,OAAO;AAC7B,eAAW,KAAK;AAAA,EAClB,GAAG,CAAC,CAAC;AAEL,SAAO;AACT;AAGO,SAAS,YAAY,SAAS,kBAAkB,sBAAsB;AAC3E,QAAM,cAAc,YAAY,MAAM,QAAQ,MAAM,gBAAgB,GAAG,CAAC,QAAQ,OAAO,gBAAgB,CAAC;AAKxG,QAAM,cAAc,YAAY,YAAU;AACxC,UAAM,EAAE,iBAAiB,sBAAsB,UAAU,IAAI;AAC7D,UAAM,OAAO,YAAY;AAEzB,QAAI,CAAC,wBAAwB,qBAAqB,IAAI,GAAG,4BAA4B,SAAS;AAE9F,KAAC,wBAAwB,qBAAqB,IAAI,GAAG,sBAAsB,EAAE,MAAM,iBAAiB,WAAW,qBAAqB,CAAC;AAGrI,KAAC,wBAAwB,qBAAqB,IAAI,GAAG,sBAAsB,wBAAwB,qBAAqB;AAGxH,6BAAyB,EAAE,uBAAuB,SAAS,sBAAsB,IAAI,yBAAyB,yBAAyB;AACvI,4BAAwB,EAAE,uBAAuB,SAAS,qBAAqB,IAAI,wBAAwB,wBAAwB;AAGnI,WAAO;AAAA,MACL,OAAO,EAAE,uBAAuB,QAAQ,sBAAsB;AAAA,MAC9D,MAAM,EAAE,uBAAuB,QAAQ,qBAAqB;AAAA,IAC9D;AAAA,EAEF,GAAG,CAAC,WAAW,CAAC;AAEhB,QAAM,0BAA0B,YAAY,CAAC,WAAW,iBAAiB;AACvE,QAAI,CAAC,wBAAwB,qBAAqB,IAAI,GAAG,4BAA4B,SAAS;AAE9F,eAAW,eAAe,cAAc;AACtC,OAAC,wBAAwB,qBAAqB,IAAI,GAAG,sBAAsB,EAAE,MAAM,YAAY,GAAG,aAAa,UAAU,CAAC;AAAA,IAC5H;AAEA,WAAO;AAAA,MACL,OAAO,EAAE,uBAAuB,QAAQ,sBAAsB;AAAA,MAC9D,MAAM,EAAE,uBAAuB,QAAQ,qBAAqB;AAAA,IAC9D;AAAA,EACF,GAAG,CAAC,WAAW,CAAC;AAGhB,QAAM,qBAAqB,YAAY,CAAC,MAAM,2BAA2B;AAEvE,QAAI,uBAAuB,KAAK;AAC9B,aAAO,EAAE,iBAAiB;AAAA,IAC5B;AAEA,UAAM,kBAAkB,CAAC;AAEzB,eAAW,YAAY,EAAE,gBAAgB;AACvC,UAAI,OAAO,uBAAuB,QAAQ,EAAE,UAAU,aAAa;AAIjE,YAAI,GAAG,kBAAkB,IAAI,GAAG;AAC9B,WAAC,uBAAuB,QAAQ,EAAE,SAAS,uBAAuB,QAAQ,EAAE,UAAU,gBAAgB,KAAK,EAAE,iBAAiB,QAAQ,EAAE,KAAK;AAAA,QAC/I,OAAO;AACL,iCAAuB,QAAQ,EAAE,SAAS,gBAAgB,KAAK,EAAE,iBAAiB,QAAQ,EAAE,KAAK;AACjG,iCAAuB,QAAQ,EAAE,SAAS,gBAAgB,KAAK,EAAE,iBAAiB,QAAQ,EAAE,KAAK;AAAA,QACnG;AAAA,MACF,OAAO;AACL,+BAAuB,QAAQ,KAAK,gBAAgB,KAAK,EAAE,iBAAiB,QAAQ,CAAC;AAAA,MACvF;AAAA,IACF;AACA,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AAEL,QAAM,8BAA8B,YAAY,CAAC,UAAU,oBAAoB;AAC7E,UAAM,OAAO,YAAY;AACzB,UAAM,oBAAoB,CAAC;AAC3B,UAAM,sBAAsB,CAAC;AAC7B,UAAM,uBAAuB,CAAC;AAE9B,QAAI,sBAAsB,GAAG,uBAAuB,QAAQ;AAC5D,UAAM,CAAC,iBAAiB,iBAAiB,IAAI,GAAG,oBAAoB,IAAI;AACxE,UAAM,SAAS,GAAG,UAAU,eAAe;AAC3C,UAAM,sBAAsB,GAAG,uBAAuB,QAAQ,iBAAiB,iBAAiB;AAEhG,QAAI,gBAAgB,sBAAsB;AAE1C,QAAI,CAAC,GAAG,UAAU,UAAU,aAAa,GAAG;AAC1C,4BAAsB,GAAG,0BAA0B,UAAU,mBAAmB;AAChF,sBAAgB,sBAAsB;AAAA,IACxC;AAEA,QAAI,GAAG,qBAAqB,IAAI,GAAG;AACjC,YAAM,yBAAyB,GAAG,0BAA0B,qBAAqB,qBAAqB,QAAQ;AAC9G,UAAI,uBAAuB,WAAW,GAAG;AACvC,wBAAgB,GAAG,gBAAgB,sBAAsB;AAAA,MAC3D;AAAA,IACF;AAEA,sBAAkB,KAAK,mBAAmB;AAC1C,wBAAoB,KAAK,EAAE,eAAe,mBAAmB,CAAC;AAC9D,yBAAqB,KAAK,EAAE,gBAAgB,mBAAmB,CAAC;AAEhE,sBAAkB,KAAK,aAAa;AACpC,wBAAoB,KAAK,EAAE,eAAe,aAAa,CAAC;AACxD,yBAAqB,KAAK,EAAE,gBAAgB,aAAa,CAAC;AAE1D,WAAO,CAAC,mBAAmB,sBAAsB,mBAAmB;AAAA,EACtE,GAAG,CAAC,WAAW,CAAC;AAEhB,QAAM,wCAAwC,YAAY,CAAC,UAAU,oBAAoB;AACvF,UAAM,OAAO,YAAY;AAEzB,UAAM,oBAAoB,CAAC;AAC3B,UAAM,sBAAsB,CAAC;AAC7B,UAAM,uBAAuB,CAAC;AAE9B,UAAM,CAAC,qBAAqB,WAAW,IAAI,GAAG,qCAAqC,MAAM,UAAU,eAAe;AAElH,sBAAkB,KAAK,mBAAmB;AAC1C,wBAAoB,KAAK,EAAE,eAAe,mBAAmB,CAAC;AAC9D,yBAAqB,KAAK,EAAE,gBAAgB,mBAAmB,CAAC;AAEhE,QAAI,mBAAmB;AAEvB,UAAM,gBAAgB,YAAY,EAAE,gBAAgB;AAEpD,aAAS,IAAI,GAAG,IAAI,eAAe,KAAK,GAAG;AACzC,YAAM,gBAAgB,GAAG,sCAAsC,MAAM,kBAAkB,UAAU,iBAAiB,aAAa,CAAC;AAEhI,wBAAkB,KAAK,aAAa;AACpC,0BAAoB,KAAK,EAAE,eAAe,aAAa,CAAC;AACxD,2BAAqB,KAAK,EAAE,gBAAgB,aAAa,CAAC;AAE1D,yBAAmB;AAAA,IACrB;AAEA,WAAO,CAAC,mBAAmB,sBAAsB,mBAAmB;AAAA,EACtE,GAAG,CAAC,WAAW,CAAC;AAEhB,QAAM,6BAA6B,YAAY,CAAC,UAAU,iBAAiB;AAEzE,QAAI,oBAAoB,CAAC;AACzB,UAAM,CAAC,wBAAwB,qBAAqB,IAAI,GAAG,4BAA4B,QAAQ;AAG/F,UAAM,oBAAoB,GAAG,iBAAiB,yBAAyB,yBAAyB,yBAAyB,CAAC;AAC1H,sBAAkB,KAAK,iBAAiB;AAGxC,UAAM,cAAc,GAAG,gBAAgB,YAAY;AAEnD,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK,GAAG;AAC9C,YAAM,gBAAgB,GAAG,sBAAsB,YAAY,GAAG,mBAAmB,YAAY,CAAC,GAAG,QAAQ;AACzG,wBAAkB,KAAK,aAAa;AAAA,IACtC;AAEA,wBAAoB,GAAG,cAAc,iBAAiB;AAEtD,UAAM,sBAAsB,kBAAkB,IAAI,WAAS,EAAE,eAAe,KAAK,CAAC;AAClF,UAAM,uBAAuB,kBAAkB,IAAI,WAAS,EAAE,gBAAgB,KAAK,CAAC;AAEpF,WAAO,CAAC,mBAAmB,sBAAsB,qBAAqB,WAAW;AAAA,EACnF,GAAG,CAAC,WAAW,CAAC;AAEhB,QAAM,cAAc,YAAY,yBAAuB;AACrD,QAAI,WAAW;AACf,eAAW,YAAY,qBAAqB;AAC1C,kBAAY;AAAA,IACd;AACA,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AAEL,QAAM,kBAAkB,YAAY,MAAM;AACxC,UAAM,eAAe,CAAC;AACtB,UAAM,OAAO,YAAY;AACzB,UAAM,sBAAsB,KAAK;AACjC,UAAM,6BAA6B,KAAK;AACxC,UAAM,0BAA0B,KAAK;AACrC,UAAM,SAAS,OAAO,KAAK,mBAAmB,EAAE,IAAI,SAAO,oBAAoB,GAAG,KAAK,GAAG,EAAE,OAAO,UAAQ,IAAI;AAC/G,UAAM,gBAAgB,OAAO,KAAK,0BAA0B,EAAE,IAAI,SAAO,2BAA2B,GAAG,KAAK,GAAG,EAAE,OAAO,UAAQ,IAAI;AACpI,UAAM,aAAa,OAAO,KAAK,uBAAuB,EAAE,IAAI,SAAO,wBAAwB,GAAG,KAAK,GAAG,EAAE,OAAO,UAAQ,IAAI;AAE3H,eAAW,aAAa,YAAY;AAElC,mBAAa,KAAK,GAAG,OAAO,IAAI,WAAS,EAAE,cAAc,OAAO,KAAK,EAAE,SAAS,CAAC,EAAE,OAAO,UAAQ,IAAI,CAAC;AACvG,mBAAa,KAAK,GAAG,cAAc,IAAI,kBAAgB,EAAE,cAAc,cAAc,YAAY,EAAE,SAAS,CAAC,CAAC;AAAA,IAChH;AAEA,WAAO;AAAA,EACT,GAAG,CAAC,WAAW,CAAC;AAEhB,QAAM,UAAU;AAAA,IACd,MAAM;AACJ,UAAI,QAAQ,MAAM,WAAW,GAAG;AAC9B,eAAO;AAAA,UACL,UAAU,QAAQ;AAAA,QACpB;AAAA,MACF;AAEA,YAAM,OAAO,YAAY;AAEzB,UAAI,GAAG,6BAA6B,IAAI,GAAG;AACzC,cAAM,eAAe,YAAY,EAAE,oBAAoB,oBAAoB;AAC3E,cAAM,uBAAuB,aAAa;AAC1C,cAAM,WAAW,YAAY,EAAE,sBAAsB,WAAW,aAAa,UAAU,CAAC;AAExF,eAAO;AAAA,UAAE;AAAA,UACP;AAAA,UACA,MAAM,aAAa;AAAA,UACnB,UAAU,aAAa;AAAA,UACvB,YAAY,aAAa,oBAAoB,CAAC;AAAA,UAC9C,mBAAmB,aAAa;AAAA,UAChC,qBAAqB,aAAa;AAAA,UAClC,qBAAqB,aAAa,kBAAkB,CAAC;AAAA,QAAE;AAAA,MAC3D;AAEA,UAAI,GAAG,6BAA6B,IAAI,GAAG;AACzC,cAAM,yBAAyB,KAAK;AACpC,cAAM,kBAAkB,mBAAmB,MAAM,sBAAsB;AACvE,cAAM,WAAW,YAAY,EAAE,iBAAiB,WAAW,KAAK,sBAAsB,CAAC;AACvF,cAAM,CAAC,mBAAmB,sBAAsB,mBAAmB,IAAI,sCAAsC,UAAU,eAAe;AACtI,cAAM,WAAW,YAAY,mBAAmB;AAEhD,eAAO;AAAA,UACL;AAAA,UACA;AAAA,UACA,MAAM,KAAK;AAAA,UACX;AAAA,UACA;AAAA,UACA;AAAA,UACA,YAAY,oBAAoB,CAAC;AAAA,UACjC,qBAAqB,kBAAkB,CAAC;AAAA,QAC1C;AAAA,MACF;AAEA,UAAI,GAAG,mBAAmB,IAAI,GAAG;AAC/B,cAAM,iBAAiB,KAAK;AAC5B,cAAM,kBAAkB,mBAAmB,MAAM,cAAc;AAC/D,cAAM,WAAW,YAAY,EAAE,iBAAiB,WAAW,KAAK,kBAAkB,CAAC;AACnF,cAAM,CAAC,mBAAmB,sBAAsB,mBAAmB,IAAI,4BAA4B,UAAU,eAAe;AAE5H,eAAO;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,YAAY,oBAAoB,CAAC;AAAA,UACjC,qBAAqB,kBAAkB,CAAC;AAAA,QAC1C;AAAA,MACF;AAEA,UAAI,GAAG,gBAAgB,IAAI,GAAG;AAC5B,cAAM,eAAe,gBAAgB;AACrC,cAAM,WAAW,wBAAwB,KAAK,gBAAgB,YAAY;AAC1E,cAAM,CAAC,mBAAmB,sBAAsB,qBAAqB,WAAW,IAAI,2BAA2B,UAAU,YAAY;AAErI,eAAO;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,YAAY,oBAAoB,CAAC;AAAA,UACjC,qBAAqB,kBAAkB,CAAC;AAAA,QAC1C;AAAA,MACF;AAEA,aAAO;AAAA,QACL,UAAU,QAAQ;AAAA,MACpB;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,MACA,QAAQ,MAAM;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,QAAM,cAAc,QAAQ,MAAM;AAChC,WAAO;AAAA,MACL,qBAAqB,CAAC;AAAA,MACtB,UAAU,QAAQ,EAAE;AAAA,MACpB,YAAY;AAAA,MACZ,UAAU;AAAA,IACZ;AAAA,EAEF,GAAG,CAAC,CAAC;AAIL,QAAM,CAAC,cAAc,eAAe,IAAI,SAAS,WAAW;AAE5D,YAAU,MAAM;AACd,oBAAgB,MAAM,QAAQ,CAAC;AAAA,EACjC,GAAG,CAAC,kBAAkB,OAAO,CAAC;AAE9B,SAAO;AACT;",
  "names": []
}
