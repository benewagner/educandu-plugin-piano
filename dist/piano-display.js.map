{
  "version": 3,
  "sources": ["../src/piano-display.js"],
  "sourcesContent": ["import Piano from './custom/piano.js';\r\nimport * as ut from './custom/utils.js';\r\nimport * as C from './custom/constants.js';\r\nimport StopIcon from './icons/stop-icon.js';\r\nimport CustomSwitch from './custom/switch.js';\r\nimport { useTranslation } from 'react-i18next';\r\nimport PlayIcon from './educandu-code/play-icon.js';\r\nimport BackspaceIcon from './icons/backspace-icon.js';\r\nimport { Button, Radio, InputNumber, Slider } from 'antd';\r\nimport AbcNotation from './educandu-code/abc-notation.js';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport CardSelector from './educandu-code/card-selector.js';\r\nimport ClientConfig from '@educandu/educandu/bootstrap/client-config.js';\r\nimport { useService } from '@educandu/educandu/components/container-context.js';\r\nimport { sectionDisplayProps } from '@educandu/educandu/ui/default-prop-types.js';\r\nimport { getAccessibleUrl, isInternalSourceType } from '@educandu/educandu/utils/source-utils.js';\r\nimport { useMidiData, usePianoId, useToneJsSampler, useMidiDevice, useExercise, useMidiPlayer } from './custom/hooks.js';\r\n\r\nimport PauseIcon from './educandu-code/pause-icon.js';\r\n\r\nexport default function PianoDisplay({ content }) {\r\n\r\n  const clientConfig = useService(ClientConfig);\r\n\r\n  const keys = useRef(null);\r\n  const activeNotes = useRef([]);\r\n  const RadioGroup = Radio.Group;\r\n  const RadioButton = Radio.Button;\r\n  const noteDurationRef = useRef(2000);\r\n  const isMidiInputEnabled = useRef(false);\r\n  const isNoteInputEnabled = useRef(false);\r\n  const isExercisePlayingRef = useRef(false);\r\n  const playExerciseMode = useRef('successive');\r\n  const [currentTestIndex, setCurrentTestIndex] = useState(0);\r\n  const [canShowSolution, setCanShowSolution] = useState(false);\r\n  const { t } = useTranslation('benewagner/educandu-plugin-piano');\r\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\r\n  const [playExerciseStartIndex, setPlayExerciseStartIndex] = useState(0);\r\n  const { sourceUrl, midiTrackTitle, colors, tests, sampleType } = content;\r\n\r\n  const src = getAccessibleUrl({ url: sourceUrl, cdnRootUrl: clientConfig.cdnRootUrl });\r\n\r\n  // Custom hooks returning state/ref variables\r\n  const pianoId = usePianoId('default'); // state\r\n  const isMidiDeviceConnected = useMidiDevice(); // state\r\n  const midiData = useMidiData(src, clientConfig, sourceUrl, isInternalSourceType); // state\r\n  const [midiPlayer, midiPlayerHandler] = useMidiPlayer(midiData); // [ref, ref]\r\n  const [sampler, hasSamplerLoaded] = useToneJsSampler(sampleType); // [ref, state]\r\n  const exerciseData = useExercise(content, currentTestIndex, currentExerciseIndex); // state\r\n\r\n  const {\r\n    clef,\r\n    keyRange,\r\n    solution,\r\n    indication,\r\n    chordVector,\r\n    indicationMidiValue\r\n  } = exerciseData ? exerciseData : {};\r\n\r\n  const chord = C.CHORD_VECTOR_MAP.get(JSON.stringify(chordVector));\r\n\r\n  const answerAbcNoteNameSequenceRef = useRef([]);\r\n  const [answerAbc, setAnswerAbc] = useState('');\r\n  const [answerMidiValueSequence, setAnswerMidiValueSequence] = useState([]);\r\n\r\n  const currentTest = (() => tests[currentTestIndex] ? tests[currentTestIndex] : {})();\r\n  const { exerciseType, customNoteSequences } = currentTest;\r\n\r\n  const testCards = tests.map((test, index) => ({ label: (index + 1).toString(), tooltip: t('testNumber', { number: index + 1 }) }));\r\n\r\n  const getEventTypeFromMidiCommand = (command, velocity) => {\r\n    switch (command) {\r\n      case C.MIDI_COMMANDS.noteOn:\r\n        if (velocity > 0) {\r\n          return C.EVENT_TYPES.noteOn;\r\n        }\r\n        return C.EVENT_TYPES.noteOff;\r\n      case C.MIDI_COMMANDS.noteOff:\r\n        return C.EVENT_TYPES.noteOff;\r\n      default:\r\n        return '';\r\n    }\r\n  };\r\n\r\n  // Keep track of active notes for midi player events as well as midi device and mouse input\r\n  const updateActiveNotes = (eventType, midiValue) => {\r\n    const arr = activeNotes.current;\r\n    const index = arr.indexOf(midiValue);\r\n    if (eventType === 'Note on') {\r\n      if (index === -1) {\r\n        arr.push(midiValue);\r\n      }\r\n    }\r\n    if (eventType === 'Note off') {\r\n      if (index !== -1) {\r\n        arr.splice(index, 1);\r\n      }\r\n    }\r\n    if (eventType === 'Reset') {\r\n      arr.length = 0;\r\n    }\r\n  };\r\n\r\n  function playOrStopNote(eventType, noteName) {\r\n\r\n    switch (eventType) {\r\n      case 'Note on':\r\n        sampler.current.triggerAttack(noteName);\r\n        break;\r\n      case 'Note off':\r\n        sampler.current.triggerRelease(noteName);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const playExercise = async () => {\r\n    if (isExercisePlayingRef.current) {\r\n      return;\r\n    }\r\n    isExercisePlayingRef.current = true;\r\n    const midiNoteNameSequence = exerciseData.midiNoteNameSequence;\r\n    if (exerciseType !== C.EXERCISE_TYPES.noteSequence && playExerciseMode.current === 'simultaneous') {\r\n      await ut.playNotesSimultaneously(sampler.current, midiNoteNameSequence, noteDurationRef, isExercisePlayingRef);\r\n      return;\r\n    }\r\n\r\n    ut.playNotesSuccessively(sampler.current, midiNoteNameSequence, noteDurationRef, isExercisePlayingRef, playExerciseStartIndex);\r\n  };\r\n\r\n  const resetEarTrainingControls = params => {\r\n    setAnswerAbc('');\r\n    setCanShowSolution(false);\r\n    setPlayExerciseStartIndex(0);\r\n    isExercisePlayingRef.current = false;\r\n    answerAbcNoteNameSequenceRef.current.length = 0;\r\n    setAnswerMidiValueSequence([]);\r\n\r\n    if (params.changeTest) {\r\n      setCurrentExerciseIndex(0);\r\n      return;\r\n    }\r\n\r\n    if (ut.isCustomNoteSequenceExercise(currentTest) && customNoteSequences.length - 1 < currentExerciseIndex + 1) {\r\n      setCurrentExerciseIndex(0);\r\n      return;\r\n    }\r\n    setCurrentExerciseIndex(prev => prev + 1);\r\n  };\r\n\r\n  const resetAllKeyStyles = () => {\r\n    const midiValueSequence = exerciseData.midiValueSequence;\r\n    for (const key of keys.current) {\r\n      if (typeof key !== 'undefined' && !midiValueSequence?.includes(parseInt(key.dataset.midiValue, 10))) {\r\n        key.style.backgroundColor = key.dataset.defaultColor;\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateKeyStyle = (eventType, midiValue) => {\r\n    const key = keys.current[midiValue];\r\n    if (typeof key === 'undefined' || (!ut.isNoteSequenceExercise(currentTest) && isNoteInputEnabled.current)) {\r\n      return;\r\n    }\r\n\r\n    if (eventType === C.EVENT_TYPES.noteOn) {\r\n      key.style.backgroundColor = colors.activeKey;\r\n    }\r\n    if (eventType === C.EVENT_TYPES.noteOff && midiValue !== indicationMidiValue) {\r\n      key.style.backgroundColor = key.dataset.defaultColor;\r\n    }\r\n    if (eventType === C.EVENT_TYPES.toggle) {\r\n      key.style.backgroundColor = key.style.backgroundColor === colors.activeKey ? key.dataset.defaultColor : colors.activeKey;\r\n    }\r\n  };\r\n\r\n  const updateAnswerAbc = () => {\r\n    setAnswerAbc(() => {\r\n      let inputString = '';\r\n      for (const abcNoteName of answerAbcNoteNameSequenceRef.current) {\r\n        inputString += abcNoteName;\r\n      }\r\n      return inputString;\r\n    });\r\n  };\r\n\r\n  const inputNote = midiValue => {\r\n\r\n    const midiValueSequence = exerciseData.midiValueSequence;\r\n    const abcNoteNameSequence = exerciseData.abcNoteNameSequence;\r\n\r\n    if (canShowSolution || ut.isKeyOutOfRange(keyRange, midiValue)) {\r\n      return;\r\n    }\r\n\r\n    // Don't allow to input more notes than needed. Max note input number is number of solution notes - 1: First note (indication) can not be input or deleted\r\n    const isAnswerComplete = ut.isAnswerComplete({\r\n      test: currentTest,\r\n      answerMidiValueSequence,\r\n      midiValueSequence,\r\n      answerAbcNoteNameSequenceRef,\r\n      abcNoteNameSequence\r\n    });\r\n\r\n    if (!ut.isNoteSequenceExercise(currentTest)) {\r\n\r\n      // Toggle answer key\r\n      if (answerMidiValueSequence.includes(midiValue)) {\r\n        setAnswerMidiValueSequence(prev => {\r\n          const arr = [...prev];\r\n          const index = arr.indexOf(midiValue);\r\n          arr.splice(index, 1);\r\n          return arr;\r\n        });\r\n      } else if (!isAnswerComplete) {\r\n        setAnswerMidiValueSequence(prev => {\r\n          const arr = [...prev];\r\n          arr.push(midiValue);\r\n          return arr;\r\n        });\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // ____Note sequence mode only from here____\r\n\r\n    if (isAnswerComplete) {\r\n      return;\r\n    }\r\n    const autoAbcNoteName = C.ABC_NOTE_NAMES[midiValue];\r\n    const solutionAbcNoteName = abcNoteNameSequence[answerAbcNoteNameSequenceRef.current.length + 1];\r\n    const solutionMidiValue = midiValueSequence[answerAbcNoteNameSequenceRef.current.length + 1];\r\n    const isCorrect = midiValue === solutionMidiValue;\r\n\r\n    // Make sure same accidental type note is rendered for chromatic notes as in solution\r\n    answerAbcNoteNameSequenceRef.current.push(isCorrect ? solutionAbcNoteName : autoAbcNoteName);\r\n\r\n    updateAnswerAbc();\r\n  };\r\n\r\n  const deleteNote = () => {\r\n    answerAbcNoteNameSequenceRef.current.pop();\r\n    updateAnswerAbc();\r\n  };\r\n\r\n  function handleMidiDeviceEvent(message) {\r\n\r\n    // Midi input !== note input\r\n    if (!isMidiInputEnabled.current) {\r\n      return;\r\n    }\r\n    const midiValue = message.data[1];\r\n    const noteName = ut.getNoteNameFromMidiValue(midiValue);\r\n    const command = message.data[0];\r\n    const velocity = message.data.length > 2 ? message.data[2] : 0;\r\n    const eventType = getEventTypeFromMidiCommand(command, velocity);\r\n\r\n    updateActiveNotes(eventType, midiValue);\r\n    playOrStopNote(eventType, noteName);\r\n    updateKeyStyle(eventType, midiValue);\r\n\r\n    if (isNoteInputEnabled.current && eventType === C.EVENT_TYPES.noteOn) {\r\n      inputNote(midiValue);\r\n    }\r\n  }\r\n\r\n  const updateMidiMessageHandlers = () => {\r\n    if (isMidiDeviceConnected) {\r\n      for (const input of document.midiAccessObj.inputs.values()) {\r\n        input.onmidimessage = handleMidiDeviceEvent;\r\n      }\r\n    }\r\n  };\r\n\r\n  function handleMidiPlayerEvent(message) {\r\n    if (!['Note on', 'Note off'].includes(message.name)) {\r\n      return;\r\n    }\r\n    const midiValue = message.noteNumber;\r\n    const velocity = message.velocity;\r\n    const noteName = message.noteName;\r\n    let eventType;\r\n    if (message.name === 'Note on') {\r\n      eventType = velocity <= 0 ? C.EVENT_TYPES.noteOff : C.EVENT_TYPES.noteOn;\r\n    }\r\n    if (message.name === 'Note off') {\r\n      eventType = C.EVENT_TYPES.noteOff;\r\n    }\r\n\r\n    playOrStopNote(eventType, noteName);\r\n    updateKeyStyle(eventType, midiValue);\r\n    updateActiveNotes(eventType, midiValue);\r\n  }\r\n\r\n  const startMidiPlayer = () => {\r\n    if (!midiPlayer.current.isPlaying()) {\r\n      midiPlayer.current.play();\r\n    }\r\n  };\r\n\r\n  const pauseMidiPlayer = () => {\r\n    if (!midiPlayer.current) {\r\n      return;\r\n    }\r\n    if (!midiPlayer.current.isPlaying()) {\r\n      return;\r\n    }\r\n    midiPlayer.current.pause();\r\n    sampler.current.releaseAll();\r\n  };\r\n\r\n  const stopMidiPlayer = () => {\r\n    if (midiPlayer.current) {\r\n      midiPlayer.current.stop();\r\n    }\r\n    sampler.current.releaseAll();\r\n    resetAllKeyStyles();\r\n    updateActiveNotes('Reset');\r\n  };\r\n\r\n  // Stored in browser document object to be called from sibling pianos\r\n  // Disable MIDI device input when sibling piano midi input switch is set active\r\n  const disableMidiInput = id => {\r\n    // Prevent piano from disabling itself\r\n    if (id === pianoId) {\r\n      return;\r\n    }\r\n    isMidiInputEnabled.current = false;\r\n    const switchElem = document.querySelector(`.${pianoId}.Piano-switch`);\r\n    if (switchElem && switchElem.classList.contains('Piano-switchChecked')) {\r\n      switchElem.classList.remove('Piano-switchChecked');\r\n    }\r\n    resetAllKeyStyles();\r\n  };\r\n\r\n  // Disable midi input for sibling pianos when midi input switch is activated\r\n  const manageSiblingPianosMidiInput = () => {\r\n\r\n    if (pianoId === 'default' || !isMidiDeviceConnected || !isMidiInputEnabled.current) {\r\n      return;\r\n    }\r\n\r\n    if (typeof document.midiPianos === 'undefined') {\r\n      document.midiPianos = [];\r\n      document.midiPianoIds = [];\r\n    }\r\n\r\n    // Check if midi pianos have been deleted\r\n    document.midiPianos = document.midiPianos.filter(piano => !!document.querySelector(`#${piano.id}`));\r\n    document.midiPianoIds = [];\r\n    document.midiPianos.forEach(piano => {\r\n      document.midiPianoIds.push(piano.id);\r\n    });\r\n\r\n    document.midiPianoIds = document.midiPianoIds.filter(id => id !== pianoId);\r\n    document.midiPianos = document.midiPianos.filter(piano => piano.id !== pianoId);\r\n\r\n    document.midiPianoIds.push(pianoId);\r\n    document.midiPianos.push({\r\n      id: pianoId,\r\n      disableMidiInput\r\n    });\r\n\r\n    for (const piano of document.midiPianos) {\r\n      piano.disableMidiInput(pianoId);\r\n    }\r\n  };\r\n\r\n  const handleSwitchClick = isChecked => {\r\n    isMidiInputEnabled.current = isChecked;\r\n    updateActiveNotes('Reset');\r\n    updateMidiMessageHandlers();\r\n    manageSiblingPianosMidiInput();\r\n  };\r\n\r\n  const handleTestCardSelected = testIndex => {\r\n    if (currentTestIndex !== testIndex) {\r\n      setCurrentTestIndex(testIndex);\r\n      resetEarTrainingControls({ changeTest: true });\r\n    }\r\n  };\r\n\r\n  const renderMidiPlayerControls = () => (\r\n    <div className=\"Piano-midiPlayerControls\" >\r\n      <Button onClick={startMidiPlayer} icon={<PlayIcon />} />\r\n      <Button onClick={pauseMidiPlayer} icon={<PauseIcon />} />\r\n      <Button onClick={stopMidiPlayer} icon={<StopIcon />} />\r\n    </div>\r\n  );\r\n\r\n  const renderMidiInputSwitch = () => (\r\n    <div className=\"Piano-midiInputSwitchContainer\">\r\n      <div>{t('midiInput')}</div>\r\n      <CustomSwitch handleSwitchClick={handleSwitchClick} pianoId={pianoId} />\r\n    </div>\r\n  );\r\n\r\n  const renderMidiTrackTitle = () => (\r\n    <div className=\"Piano-midiTrackTitle\">{midiTrackTitle}</div>\r\n  );\r\n\r\n  const renderPlayExerciseModeRadioGroup = () => (\r\n    <div className=\"Piano-playExerciseModeRGContainer\">\r\n      <RadioGroup defaultValue=\"successive\" className=\"Piano-playExerciseModeRG\">\r\n        <RadioButton className=\"Piano-btnPlayExerciseMode\" value=\"successive\" onChange={() => { playExerciseMode.current = 'successive'; }}>{t('successive')}</RadioButton>\r\n        <RadioButton className=\"Piano-btnPlayExerciseMode\" value=\"simultaneous\" onChange={() => { playExerciseMode.current = 'simultaneous'; }}>{t('simultaneous')}</RadioButton>\r\n      </RadioGroup>\r\n    </div>\r\n  );\r\n\r\n  const renderNoteSequenceControls = () => {\r\n    return (\r\n      <div className=\"Piano-playFromNoteInputContainer\">\r\n        <div className=\"Piano-controlsLabel\">{`${t('playFromNote')}:`}</div>\r\n        <InputNumber\r\n          className=\"Piano-playFromNoteInput\"\r\n          value={playExerciseStartIndex + 1}\r\n          min={1}\r\n          max={exerciseData.abcNoteNameSequence.length}\r\n          onChange={value => { setPlayExerciseStartIndex(value - 1); }}\r\n          />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const formatter = value => `${(value / 1000).toFixed(1)}s`;\r\n\r\n  const renderEarTrainingControls = test => (\r\n    <div className=\"Piano-earTrainingControls\">\r\n      <div className=\"Piano-earTrainingHeadline\">\r\n        <h5 className=\"Piano-headlineEarTraining\">{`${t('earTraining')}: ${t(exerciseType)} ${ut.usesWhiteKeysOnly(currentTest) ? `(${t('whiteKeysOnly')})` : ''}`}</h5>\r\n      </div>\r\n      <div className=\"Piano-earTrainingControlsItem\">\r\n        <Button onClick={playExercise} icon={<PlayIcon />} />\r\n        <Button onClick={() => { isExercisePlayingRef.current = false; }} icon={<StopIcon />} />\r\n      </div>\r\n      <div className=\"Piano-earTrainingControlsBody\">\r\n        <div className=\"Piano-noteDurationControlsItem\">\r\n          <div className=\"Piano-controlsLabel\">{`${t('noteDuration')}:`}</div>\r\n          <div className=\"Piano-noteDurationSlider\">\r\n            <Slider tooltip={{ formatter }} defaultValue={2000} min={200} max={4000} step={100} onChange={value => { noteDurationRef.current = value; }} />\r\n          </div>\r\n        </div>\r\n        {ut.isNoteSequenceExercise(test) && renderNoteSequenceControls()}\r\n        {!ut.isNoteSequenceExercise(test) && renderPlayExerciseModeRadioGroup()}\r\n        <div className=\"Piano-exerciseBtns\">\r\n          <Button\r\n            className=\"Piano-btnShowHideSolution\"\r\n            onClick={() => {\r\n              setCanShowSolution(prev => !prev);\r\n            }}\r\n            >\r\n            {canShowSolution ? t('hideSolution') : t('showSolution')}\r\n          </Button>\r\n          <Button className=\"Piano-btnNewExercise\" onClick={resetEarTrainingControls}>{t('newExercise')}</Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isMidiInputEnabled.current) {\r\n      updateMidiMessageHandlers();\r\n    }\r\n    manageSiblingPianosMidiInput();\r\n  });\r\n\r\n  // Set event handlers for midiPlayer\r\n  useEffect(() => {\r\n    midiPlayerHandler.current.updateActiveNotes = updateActiveNotes;\r\n    midiPlayerHandler.current.handleMidiPlayerEvent = handleMidiPlayerEvent;\r\n    midiPlayerHandler.current.resetAllKeyStyles = resetAllKeyStyles;\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return function cleanUp() {\r\n      if (midiPlayer.current && hasSamplerLoaded && sampler) {\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        midiPlayer.current.stop();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        sampler.current.releaseAll();\r\n      }\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (isMidiDeviceConnected) {\r\n      for (const input of document.midiAccessObj.inputs.values()) {\r\n        input.onmidimessage = null;\r\n      }\r\n    }\r\n  }, [isMidiDeviceConnected]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {testCards.length > 1 && (\r\n        <div className=\"EarTrainingDisplay-controlPanel\">\r\n          <div className=\"Piano-CardSelectorWrapper\">\r\n            <CardSelector\r\n              cards={testCards}\r\n              onCardSelected={handleTestCardSelected}\r\n              selectedCardIndex={currentTestIndex}\r\n              treatSelectedCardAsVisited\r\n              />\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"Piano-abcDisplayContainer\">\r\n        {ut.isNoteSequenceExercise(currentTest) && (\r\n          <div className=\"AbcNotation Piano-flex\">\r\n            <div className=\"AbcNotation-wrapper u-width-65 Piano-answerAbcDisplay\">\r\n              <div className=\"Piano-noteInputSwitch\">\r\n                <CustomSwitch handleSwitchClick={isChecked => { isNoteInputEnabled.current = isChecked; }} isNoteInputEnabled={isNoteInputEnabled} />\r\n                <div>{t('noteInput')}</div>\r\n              </div>\r\n              <div className=\"Piano-answerAbcNotation\">\r\n                <AbcNotation abcCode={`L:1/4 \\n K:C ${clef} \\n ${indication + answerAbc}`} />\r\n              </div>\r\n              <Button onClick={deleteNote} icon={<BackspaceIcon />} className=\"Piano-btnDeleteNote\" />\r\n            </div>\r\n            <div className=\"AbcNotation-wrapper u-width-65 Piano-solutionAbcDisplay\">\r\n              <div>{canShowSolution ? t('solution') : t('firstNote')}</div>\r\n              <div className=\"Piano-solutionAbcNotation\">\r\n                <AbcNotation abcCode={`L:1/4 \\n K:C ${clef} \\n ${canShowSolution ? solution : indication}`} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {[C.EXERCISE_TYPES.interval, C.EXERCISE_TYPES.chord].includes(exerciseType) && (\r\n        <div className=\"Piano-threeFlexColumnsContainer\">\r\n          <div className=\"Piano-oneOfThreeFlexColumns\">\r\n            <div className=\"Piano-switchContainer\">\r\n              <CustomSwitch handleSwitchClick={isChecked => { isNoteInputEnabled.current = isChecked; }} isNoteInputEnabled={isNoteInputEnabled} />\r\n              <div>{t('noteInput')}</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"Piano-chordSolutionDisplay\">\r\n            {!!canShowSolution && exerciseType === C.EXERCISE_TYPES.chord && <div>{`${t(chord.type)}, ${t(chord.inversion)}`}</div>}\r\n          </div>\r\n          <div className=\"Piano-oneOfThreeFlexColumns\">\r\n            <div />\r\n          </div>\r\n        </div>\r\n      )}\r\n      <Piano\r\n        keys={keys}\r\n        colors={colors}\r\n        content={content}\r\n        pianoId={pianoId}\r\n        sampler={sampler}\r\n        test={currentTest}\r\n        inputNote={inputNote}\r\n        activeNotes={activeNotes}\r\n        exerciseData={exerciseData}\r\n        updateKeyStyle={updateKeyStyle}\r\n        canShowSolution={canShowSolution}\r\n        hasSamplerLoaded={hasSamplerLoaded}\r\n        updateActiveNotes={updateActiveNotes}\r\n        isNoteInputEnabled={isNoteInputEnabled}\r\n        isExercisePlayingRef={isExercisePlayingRef}\r\n        answerMidiValueSequence={answerMidiValueSequence}\r\n        />\r\n      <div className=\"Piano-controlsContainer\">\r\n        <div className=\"Piano-controlsWrapper\">\r\n          {!!sourceUrl && <h5 className=\"Piano-headlineMidi\">MIDI</h5>}\r\n          {!!sourceUrl && renderMidiPlayerControls()}\r\n          {!!sourceUrl && !!midiTrackTitle && renderMidiTrackTitle()}\r\n        </div>\r\n        <div className=\"Piano-earTrainingControlsContainer\">\r\n          {content.tests.length !== 0 && renderEarTrainingControls(currentTest)}\r\n        </div>\r\n        <div className=\"Piano-midiInputSwitch\">\r\n          {!!isMidiDeviceConnected && renderMidiInputSwitch()}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nPianoDisplay.propTypes = {\r\n  ...sectionDisplayProps\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
