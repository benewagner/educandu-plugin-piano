{
  "version": 3,
  "sources": ["../src/piano-editor.js"],
  "sourcesContent": ["/* eslint-disable max-lines */\r\nimport * as ut from './custom/utils.js';\r\nimport PianoInfo from './piano-info.js';\r\nimport id from './educandu-code/unique-id.js';\r\nimport { useTranslation } from 'react-i18next';\r\nimport React, { useState, useRef } from 'react';\r\nimport { pianoLayout } from './custom/piano.js';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport UrlInput from './educandu-code/url-input.js';\r\nimport ItemPanel from './educandu-code/item-panel.js';\r\nimport AbcEditorItem from './custom/abc-editor-item.js';\r\nimport { cloneDeep } from './educandu-code/resources.js';\r\nimport { KeyWhite, KeyWhiteWithBlack } from './custom/keys.js';\r\nimport { FORM_ITEM_LAYOUT } from '@educandu/educandu/domain/constants.js';\r\nimport { swapItemsAt, removeItemAt } from './educandu-code/array-utils.js';\r\nimport { Form, Input, Radio, Button, Slider, Checkbox, Divider } from 'antd';\r\nimport { useService } from '@educandu/educandu/components/container-context.js';\r\nimport { sectionEditorProps } from '@educandu/educandu/ui/default-prop-types.js';\r\nimport { EXERCISE_TYPES, INTERVAL_NAMES, TRIADS, SEVENTH_CHORDS, INVERSIONS } from './custom/constants.js';\r\n\r\nexport default function PianoEditor({ content, onContentChanged }) {\r\n\r\n  const FormItem = Form.Item;\r\n  const RadioGroup = Radio.Group;\r\n  const RadioButton = Radio.Button;\r\n  const keyRangeSelection = useRef([]);\r\n  const abcHasBeenInput = useRef(false);\r\n  const pianoInfo = useService(PianoInfo);\r\n  const { tests, sourceUrl, midiTrackTitle } = content;\r\n  const { t } = useTranslation('benewagner/educandu-plugin-piano');\r\n  const selectorPianoColors = { whiteKey: 'white', blackKey: 'black' };\r\n  const [canRenderSelectorPiano, setCanRenderSelectorPiano] = useState(false);\r\n\r\n  const formatter = value => {\r\n    const tooltips = { 1: t('noteB'), 2: 'C', 3: 'D', 4: 'E', 5: 'F', 6: 'G', 0: 'A' };\r\n    return tooltips[value % 7];\r\n  };\r\n\r\n  const getCheckboxStateAndNewTests = event => {\r\n    const checkedState = event.target.checked;\r\n    const newTests = cloneDeep(tests);\r\n    return [checkedState, newTests];\r\n  };\r\n\r\n  const changeContent = newContentValues => {\r\n    const newContent = { ...content, ...newContentValues };\r\n    onContentChanged(newContent);\r\n  };\r\n\r\n  const handleDeleteTest = index => {\r\n    const newTests = removeItemAt(tests, index);\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleMoveTestUp = index => {\r\n    const newTests = swapItemsAt(tests, index, index - 1);\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleMoveTestDown = index => {\r\n    const newTests = swapItemsAt(tests, index, index + 1);\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleDeleteNoteSequence = (testIndex, index) => {\r\n    const newTests = cloneDeep(tests);\r\n    const newNoteSequences = removeItemAt(tests[testIndex].customNoteSequences, index);\r\n    newTests[testIndex].customNoteSequences = newNoteSequences;\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleMoveNoteSequenceUp = (testIndex, index) => {\r\n    const newTests = cloneDeep(tests);\r\n    const newNoteSequences = swapItemsAt(tests[testIndex].customNoteSequences, index, index - 1);\r\n    newTests[testIndex].customNoteSequences = newNoteSequences;\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleMoveNoteSequenceDown = (testIndex, index) => {\r\n    const newTests = cloneDeep(tests);\r\n    const newNoteSequences = swapItemsAt(tests[testIndex].customNoteSequences, index, index + 1);\r\n    newTests[testIndex].customNoteSequences = newNoteSequences;\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleAddTestButtonClick = () => {\r\n    const newTests = cloneDeep(tests);\r\n    newTests.push(pianoInfo.getDefaultTest());\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleIntervalCheckboxStateChanged = (event, exerciseType, checkboxStates, index) => {\r\n    const [checkedState, newTests] = getCheckboxStateAndNewTests(event);\r\n    const checkbox = event.target;\r\n    const interval = checkbox.interval;\r\n    const intervalType = checkbox.intervalType;\r\n    const newCheckboxStates = cloneDeep(checkboxStates);\r\n\r\n    const updateAllCheckboxStates = intervalSelector => {\r\n      if (typeof newCheckboxStates[intervalSelector].minor === 'undefined') {\r\n        newCheckboxStates[intervalSelector] = checkedState;\r\n      } else {\r\n        newCheckboxStates[intervalSelector].minor = checkedState;\r\n        newCheckboxStates[intervalSelector].major = checkedState;\r\n      }\r\n    };\r\n\r\n    const updateCheckboxStates = intervalSelector => {\r\n      if (typeof newCheckboxStates[intervalSelector].minor === 'undefined') {\r\n        newCheckboxStates[intervalSelector] = checkedState;\r\n      }\r\n      if (typeof newCheckboxStates[intervalSelector].minor !== 'undefined' && !!intervalType) {\r\n        newCheckboxStates[intervalSelector][intervalType] = checkedState;\r\n      }\r\n      if (typeof newCheckboxStates[intervalSelector].minor !== 'undefined' && !intervalType) {\r\n        newCheckboxStates[intervalSelector].minor = checkedState;\r\n        newCheckboxStates[intervalSelector].major = checkedState;\r\n      }\r\n    };\r\n\r\n    if (!checkedState) {\r\n      newCheckboxStates.all = false;\r\n    }\r\n\r\n    if (checkbox.interval === 'all') {\r\n      newCheckboxStates.all = checkedState;\r\n      Object.keys(newCheckboxStates).forEach(key => {\r\n        updateAllCheckboxStates(key);\r\n      });\r\n    } else {\r\n      updateCheckboxStates(interval);\r\n    }\r\n    newTests[index][`${exerciseType}CheckboxStates`] = newCheckboxStates;\r\n    ut.ensureOneIntervalIsChecked(index, newTests, exerciseType);\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleDirectionCheckboxStateChanged = (event, direction, index) => {\r\n    const [checkedState, newTests] = getCheckboxStateAndNewTests(event);\r\n    const otherDirection = direction === 'up' ? 'down' : 'up';\r\n    newTests[index].directionCheckboxStates[direction] = checkedState;\r\n    if (!checkedState) {\r\n      newTests[index].directionCheckboxStates[otherDirection] = true;\r\n    }\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleAllChordOptionsStateChanged = (event, index) => {\r\n    const [checkedState, newTests] = getCheckboxStateAndNewTests(event);\r\n    const exerciseType = tests[index].exerciseType;\r\n\r\n    newTests[index].allChordOptions = checkedState;\r\n\r\n    for (const key of Object.keys(newTests[index].triadCheckboxStates)) {\r\n      newTests[index].triadCheckboxStates[key] = checkedState;\r\n    }\r\n    for (const key of Object.keys(newTests[index].seventhChordCheckboxStates)) {\r\n      newTests[index].seventhChordCheckboxStates[key] = checkedState;\r\n    }\r\n    for (const key of Object.keys(newTests[index].inversionCheckboxStates)) {\r\n      newTests[index].inversionCheckboxStates[key] = checkedState;\r\n    }\r\n    newTests[index][`${exerciseType}AllowsLargeIntervals`] = checkedState;\r\n\r\n    !checkedState && ut.ensureOneInversionIsChecked(index, newTests);\r\n    !checkedState && ut.ensureOneChordIsChecked(index, newTests);\r\n\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleTriadCheckboxStateChanged = (event, index, triad) => {\r\n    const [checkedState, newTests] = getCheckboxStateAndNewTests(event);\r\n    newTests[index].triadCheckboxStates[triad] = checkedState;\r\n    if (!checkedState) {\r\n      newTests[index].allChordOptions = checkedState;\r\n      ut.ensureOneChordIsChecked(index, newTests);\r\n    }\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleSeventhChordCheckboxStateChanged = (event, index, chord) => {\r\n    const [checkedState, newTests] = getCheckboxStateAndNewTests(event);\r\n    newTests[index].seventhChordCheckboxStates[chord] = checkedState;\r\n    if (!checkedState) {\r\n      newTests[index].allChordOptions = checkedState;\r\n      ut.ensureOneChordIsChecked(index, newTests);\r\n    }\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleInversionCheckboxStateChanged = (event, index, inversion) => {\r\n    const [checkedState, newTests] = getCheckboxStateAndNewTests(event);\r\n    newTests[index].inversionCheckboxStates[inversion] = checkedState;\r\n    if (!checkedState) {\r\n      newTests[index].allChordOptions = checkedState;\r\n      ut.ensureOneInversionIsChecked(index, newTests);\r\n    }\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleKeyRangeChanged = () => {\r\n    const keyRangeValues = keyRangeSelection.current.sort((a, b) => {\r\n      return a - b;\r\n    });\r\n    const keyRange = {\r\n      first: keyRangeValues[0],\r\n      last: keyRangeValues[keyRangeValues.length - 1]\r\n    };\r\n    setCanRenderSelectorPiano(!canRenderSelectorPiano);\r\n    changeContent({ keyRange });\r\n  };\r\n\r\n  const handleWhiteKeysCheckboxStateChanged = (event, index) => {\r\n    const [checkedState, newTests] = getCheckboxStateAndNewTests(event);\r\n    newTests[index].whiteKeysOnly = checkedState;\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleNoteRangeChanged = (event, index) => {\r\n    const newTests = cloneDeep(tests);\r\n    const { exerciseType } = tests[index];\r\n    // NoteRange is range of notes provided for ear training exercise. Will be turned into keyRange (part of piano to be rendered) in custom hook useExercise\r\n    // Both noteRange and keyRange define first and last white key index (not midi values) of part of piano to be rendered\r\n    newTests[index][`${exerciseType}NoteRange`] = { first: event[0], last: event[1] };\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleCustomNoteSequenceNoteRangeChanged = (event, testIndex, index) => {\r\n    // See handleNoteRangeChanged above\r\n    const newTests = cloneDeep(tests);\r\n    newTests[testIndex].customNoteSequences[index].noteRange = { first: event[0], last: event[1] };\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const updateKeyRangeSelection = event => {\r\n    event.target.classList.toggle('Piano-keySelected');\r\n    const value = parseInt(event.target.dataset.index, 10);\r\n    if (!keyRangeSelection.current.includes(value)) {\r\n      keyRangeSelection.current.push(value);\r\n      return;\r\n    }\r\n    const index = keyRangeSelection.current.indexOf(value);\r\n    keyRangeSelection.current.splice(index, 1);\r\n  };\r\n\r\n  const handleSourceUrlChange = value => {\r\n    changeContent({ sourceUrl: value });\r\n  };\r\n\r\n  const handleExerciseTypeValueChanged = (event, index) => {\r\n    const value = event.target.value;\r\n    const newTests = cloneDeep(tests);\r\n    newTests[index].exerciseType = value;\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleMidiTrackTitleValueChanged = event => {\r\n    const { value } = event.target;\r\n    changeContent({ midiTrackTitle: value });\r\n  };\r\n\r\n  const handleNumberOfNotesValueChanged = (event, index) => {\r\n    const value = event;\r\n    const newTests = cloneDeep(tests);\r\n    newTests[index].numberOfNotes = value;\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleNoteSequenceTypeChanged = (event, index) => {\r\n    const { value } = event.target;\r\n    const newTests = cloneDeep(tests);\r\n    newTests[index].isCustomNoteSequence = value;\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleAbcCodeChanged = (string, testIndex, noteSequenceIndex) => {\r\n    const abcString = string.length !== 0 ? string : 'C';\r\n    const { abcNoteNameSequence, midiNoteNameSequence, midiValueSequence, filteredAbc } = ut.analyseABC(abcString);\r\n    const newCustomNoteSequences = tests[testIndex].customNoteSequences.map((nS, i) => i === noteSequenceIndex\r\n      ? { ...nS,\r\n        abc: abcString,\r\n        abcNoteNameSequence,\r\n        midiNoteNameSequence,\r\n        midiValueSequence,\r\n        filteredAbc }\r\n      : nS);\r\n    const newTests = tests.map((test, i) => i === testIndex ? { ...test, customNoteSequences: newCustomNoteSequences } : test);\r\n    abcHasBeenInput.current = true;\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleClefTypeChanged = (event, testIndex) => {\r\n    const { value } = event.target;\r\n    const newTests = cloneDeep(tests);\r\n    newTests[testIndex].clef = value;\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleCustomNoteSequenceClefTypeChanged = (event, testIndex, noteSequenceIndex) => {\r\n    const { value } = event.target;\r\n    const newTests = cloneDeep(tests);\r\n    newTests[testIndex].customNoteSequences[noteSequenceIndex].clef = value;\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleAddCustomNoteSequenceButtonClick = index => {\r\n    const newTests = cloneDeep(tests);\r\n    newTests[index].customNoteSequences.push(pianoInfo.getDefaultCustomNoteSequence());\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const handleLargeIntervalsCheckboxStateChanged = (event, index) => {\r\n    const [checkedState, newTests] = getCheckboxStateAndNewTests(event);\r\n    const exerciseType = tests[index].exerciseType;\r\n    newTests[index][`${exerciseType}AllowsLargeIntervals`] = checkedState;\r\n    if (!checkedState && exerciseType === EXERCISE_TYPES.chord) {\r\n      newTests[index].allChordOptions = checkedState;\r\n    }\r\n    changeContent({ tests: newTests });\r\n  };\r\n\r\n  const toggleSelectorPiano = () => {\r\n    setCanRenderSelectorPiano(!canRenderSelectorPiano);\r\n  };\r\n\r\n  const renderMidiTrackTitleInput = (value, onChangeHandler) => (\r\n    <FormItem label={t('common:title')} {...FORM_ITEM_LAYOUT}>\r\n      <Input value={value} onChange={onChangeHandler} />\r\n    </FormItem>\r\n  );\r\n\r\n  const renderSelectorPiano = () => (\r\n    <div className=\"Piano-selectorPianoContainer\">\r\n      <div className=\"Piano-selectorPianoWrapper\">\r\n        <div>\r\n          {t('keyRangeSelectionText')}\r\n        </div>\r\n        <div className=\"Piano-selectorPiano\">\r\n          {pianoLayout.map((elem, index) => {\r\n            if (elem[0] === 0 && index < pianoLayout.length - 1) {\r\n              return (\r\n                <KeyWhiteWithBlack\r\n                  updateKeyRangeSelection={updateKeyRangeSelection}\r\n                  key={id.create()}\r\n                  midiValue={elem[1]}\r\n                  index={index}\r\n                  colors={selectorPianoColors}\r\n                  />\r\n              );\r\n            }\r\n            return <KeyWhite updateKeyRangeSelection={updateKeyRangeSelection} key={id.create()} midiValue={elem[1]} index={index} colors={selectorPianoColors} />;\r\n          })}\r\n        </div>\r\n        <div>\r\n          <Button onClick={handleKeyRangeChanged}>{t('common:confirm')}</Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderKeyRangeSelector = onClickHandler => (\r\n    <React.Fragment>\r\n      <FormItem label={t('pianoKeyRange')} {...FORM_ITEM_LAYOUT}>\r\n        <Button onClick={onClickHandler} >. . .</Button>\r\n      </FormItem>\r\n      {!!canRenderSelectorPiano && renderSelectorPiano()}\r\n    </React.Fragment>\r\n  );\r\n\r\n  const renderWhiteKeysCheckbox = index => (\r\n    <Checkbox\r\n      className=\"Piano-whiteKeysCheckbox\"\r\n      defaultChecked={tests[index].whiteKeysOnly}\r\n      onChange={event => handleWhiteKeysCheckboxStateChanged(event, index)}\r\n      >\r\n      {t('whiteKeysOnly')}\r\n    </Checkbox>\r\n  );\r\n\r\n  const renderNoteRangeSelector = (testIndex, onAfterChangeHandler, noteRange, index) => {\r\n\r\n    return (\r\n      <FormItem label={t('noteRange')} {...FORM_ITEM_LAYOUT}>\r\n        <Slider\r\n          min={0}\r\n          max={51}\r\n          defaultValue={[noteRange.first, noteRange.last]}\r\n          onAfterChange={event => onAfterChangeHandler(event, testIndex, index)}\r\n          range\r\n          tooltip={{ formatter }}\r\n          marks={{ 2: t('c1'), 9: t('c2'), 16: t('c3'), 23: t('c4'), 30: t('c5'), 37: t('c6'), 44: t('c7'), 51: t('c8') }}\r\n          />\r\n        {ut.isRandomNoteSequenceExercise(tests[testIndex]) && renderWhiteKeysCheckbox(testIndex)}\r\n      </FormItem>\r\n    );\r\n  };\r\n\r\n  const renderClefTypeSelector = (testIndex, clef, onChangeHandler, index) => (\r\n    <FormItem label={t('clef')} {...FORM_ITEM_LAYOUT}>\r\n      <RadioGroup value={clef}>\r\n        <RadioButton value=\"treble\" onChange={event => onChangeHandler(event, testIndex, index)}>{t('trebleClef')}</RadioButton>\r\n        <RadioButton value=\"bass\" onChange={event => onChangeHandler(event, testIndex, index)}>{t('bassClef')}</RadioButton>\r\n      </RadioGroup>\r\n    </FormItem>\r\n  );\r\n\r\n  const renderIntervalSelector = (checkboxStates, exerciseType, testIndex) => (\r\n    <React.Fragment>\r\n      <FormItem label={t('intervals')} {...FORM_ITEM_LAYOUT}>\r\n        <div>\r\n          <Checkbox\r\n            defaultChecked={checkboxStates.all}\r\n            interval=\"all\"\r\n            onChange={event => handleIntervalCheckboxStateChanged(event, exerciseType, checkboxStates, testIndex)}\r\n            >{t('all')}\r\n          </Checkbox>\r\n        </div>\r\n        {INTERVAL_NAMES.map((interval, index) => {\r\n          return (\r\n            <div key={id.create()}>\r\n              <Checkbox\r\n                defaultChecked={checkboxStates[interval] === true || checkboxStates[interval].minor || checkboxStates[interval].major}\r\n                className=\"Piano-checkbox\"\r\n                interval={interval}\r\n                onChange={event => handleIntervalCheckboxStateChanged(event, exerciseType, checkboxStates, testIndex)}\r\n                >\r\n                {t(interval)}\r\n              </Checkbox>\r\n              {[1, 2, 6, 7].includes(index) && !tests[testIndex].whiteKeysOnly && (\r\n                <React.Fragment>\r\n                  <Checkbox\r\n                    defaultChecked={checkboxStates[interval].minor}\r\n                    interval={interval}\r\n                    intervalType=\"minor\"\r\n                    onChange={event => handleIntervalCheckboxStateChanged(event, exerciseType, checkboxStates, testIndex)}\r\n                    >\r\n                    {t('minor')}\r\n                  </Checkbox>\r\n                  <Checkbox\r\n                    defaultChecked={checkboxStates[interval].major}\r\n                    interval={interval}\r\n                    intervalType=\"major\"\r\n                    onChange={event => handleIntervalCheckboxStateChanged(event, exerciseType, checkboxStates, testIndex)}\r\n                    >{t('major')}\r\n                  </Checkbox>\r\n                </React.Fragment>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </FormItem>\r\n      <FormItem label={t('largeIntervals')} {...FORM_ITEM_LAYOUT}>\r\n        <Checkbox\r\n          defaultChecked={tests[testIndex][`${exerciseType}AllowsLargeIntervals`]}\r\n          onChange={event => { handleLargeIntervalsCheckboxStateChanged(event, testIndex); }}\r\n          >\r\n          {t('intervalsPlusOctave')}\r\n        </Checkbox>\r\n      </FormItem>\r\n      {exerciseType === EXERCISE_TYPES.interval && (\r\n        <FormItem label={t('direction')} {...FORM_ITEM_LAYOUT}>\r\n          <Checkbox\r\n            defaultChecked={tests[testIndex].directionCheckboxStates.up}\r\n            onChange={event => handleDirectionCheckboxStateChanged(event, 'up', testIndex)}\r\n            >\r\n            {t('upwards')}\r\n          </Checkbox>\r\n          <Checkbox\r\n            defaultChecked={tests[testIndex].directionCheckboxStates.down}\r\n            onChange={event => handleDirectionCheckboxStateChanged(event, 'down', testIndex)}\r\n            >\r\n            {t('downwards')}\r\n          </Checkbox>\r\n        </FormItem>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n\r\n  const renderChordSelector = index => (\r\n    <React.Fragment>\r\n      <FormItem label={t('options')} {...FORM_ITEM_LAYOUT}>\r\n        <Checkbox\r\n          key={id.create()}\r\n          defaultChecked={tests[index].allChordOptions}\r\n          onChange={event => handleAllChordOptionsStateChanged(event, index)}\r\n          >\r\n          {t('all')}\r\n        </Checkbox>\r\n      </FormItem>\r\n      <FormItem label={t('triads')} {...FORM_ITEM_LAYOUT}>\r\n        <div>\r\n          {Object.keys(TRIADS).map(triad => (\r\n            <Checkbox\r\n              key={id.create()}\r\n              defaultChecked={tests[index].triadCheckboxStates[triad]}\r\n              onChange={event => handleTriadCheckboxStateChanged(event, index, triad)}\r\n              >\r\n              {t(triad)}\r\n            </Checkbox>\r\n          ))}\r\n        </div>\r\n      </FormItem>\r\n      <FormItem label={t('seventhChords')} {...FORM_ITEM_LAYOUT}>\r\n        {SEVENTH_CHORDS.map(chord => (\r\n          <div key={id.create()}>\r\n            <Checkbox\r\n              defaultChecked={tests[index].seventhChordCheckboxStates[chord]}\r\n              onChange={event => handleSeventhChordCheckboxStateChanged(event, index, chord)}\r\n              >\r\n              {t(chord)}\r\n            </Checkbox>\r\n          </div>\r\n        ))}\r\n      </FormItem>\r\n      <FormItem label={t('inversions')} {...FORM_ITEM_LAYOUT}>\r\n        <div>\r\n          {Object.keys(INVERSIONS).map(inversion => (\r\n            <Checkbox\r\n              key={id.create()}\r\n              defaultChecked={tests[index].inversionCheckboxStates[inversion]}\r\n              onChange={event => handleInversionCheckboxStateChanged(event, index, inversion)}\r\n              >\r\n              {t(inversion)}\r\n            </Checkbox>\r\n          ))}\r\n        </div>\r\n      </FormItem>\r\n      <FormItem label={t('largeIntervals')} {...FORM_ITEM_LAYOUT}>\r\n        <Checkbox\r\n          defaultChecked={tests[index][`${tests[index].exerciseType}AllowsLargeIntervals`]}\r\n          onChange={event => { handleLargeIntervalsCheckboxStateChanged(event, index); }}\r\n          >\r\n          {t('allowLargeIntervals')}\r\n        </Checkbox>\r\n      </FormItem>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const renderNoteSequenceTypeSelector = index => (\r\n    <FormItem label={t('type')} {...FORM_ITEM_LAYOUT}>\r\n      <RadioGroup value={tests[index].isCustomNoteSequence}>\r\n        <RadioButton value={false} onChange={event => handleNoteSequenceTypeChanged(event, index)}>{t('random')}</RadioButton>\r\n        <RadioButton value onChange={event => handleNoteSequenceTypeChanged(event, index)}>{t('predefined')}</RadioButton>\r\n      </RadioGroup>\r\n    </FormItem>\r\n  );\r\n\r\n  const renderCustomNoteSequencePanels = testIndex => {\r\n    return tests[testIndex].customNoteSequences.map((noteSequence, index) => (\r\n      <ItemPanel\r\n        index={index}\r\n        key={id.create()}\r\n        itemsCount={tests[testIndex].customNoteSequences.length}\r\n        header={t('noteSequenceNumber', { number: index + 1 })}\r\n        onMoveUp={() => handleMoveNoteSequenceUp(testIndex, index)}\r\n        onMoveDown={() => handleMoveNoteSequenceDown(testIndex, index)}\r\n        onDelete={() => handleDeleteNoteSequence(testIndex, index)}\r\n        >\r\n        {renderNoteRangeSelector(testIndex, handleCustomNoteSequenceNoteRangeChanged, tests[testIndex].customNoteSequences[index].noteRange, index)}\r\n        {renderClefTypeSelector(testIndex, noteSequence.clef, handleCustomNoteSequenceClefTypeChanged, index)}\r\n        <AbcEditorItem\r\n          noteSequence={noteSequence}\r\n          testIndex={testIndex}\r\n          index={index}\r\n          handleAbcCodeChanged={handleAbcCodeChanged}\r\n          />\r\n      </ItemPanel>\r\n    ));\r\n  };\r\n\r\n  const renderNoteSequenceSelector = (numberOfNotes, index) => {\r\n    return (\r\n      <React.Fragment>\r\n        {!tests[index].isCustomNoteSequence && (\r\n          <FormItem label={t('numberOfNotes')} {...FORM_ITEM_LAYOUT}>\r\n            <Slider\r\n              min={3}\r\n              max={10}\r\n              defaultValue={numberOfNotes}\r\n              onAfterChange={event => handleNumberOfNotesValueChanged(event, index)}\r\n              dots\r\n              marks={{ 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: '10' }}\r\n              />\r\n          </FormItem>\r\n        )}\r\n        {!tests[index].isCustomNoteSequence && renderIntervalSelector(tests[index].noteSequenceCheckboxStates, EXERCISE_TYPES.noteSequence, index)}\r\n        {!!tests[index].isCustomNoteSequence && renderCustomNoteSequencePanels(index)}\r\n        {!!tests[index].isCustomNoteSequence\r\n        && (\r\n          <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => handleAddCustomNoteSequenceButtonClick(index)}>\r\n            {t('addCustomNoteSequence')}\r\n          </Button>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form layout=\"horizontal\" labelAlign=\"left\">\r\n        {renderKeyRangeSelector(toggleSelectorPiano)}\r\n        <Divider>MIDI</Divider>\r\n        {renderMidiTrackTitleInput(midiTrackTitle, handleMidiTrackTitleValueChanged)}\r\n        <FormItem {...FORM_ITEM_LAYOUT} label={t('common:url')}>\r\n          <UrlInput value={sourceUrl} onChange={handleSourceUrlChange} />\r\n        </FormItem>\r\n        <Divider plain>{t('earTraining')}</Divider>\r\n        {\r\n          tests.map((test, index) => (\r\n            <ItemPanel\r\n              index={index}\r\n              key={id.create()}\r\n              // Make it possible to delete first test\r\n              itemsCount={tests.length + 1}\r\n              header={t('testNumber', { number: index + 1 })}\r\n              onMoveUp={handleMoveTestUp}\r\n              onMoveDown={handleMoveTestDown}\r\n              onDelete={handleDeleteTest}\r\n              >\r\n              <FormItem label={t('exerciseType')} {...FORM_ITEM_LAYOUT}>\r\n                <RadioGroup onChange={event => handleExerciseTypeValueChanged(event, index)} value={test.exerciseType}>\r\n                  <RadioButton value={EXERCISE_TYPES.interval}>{t('interval')}</RadioButton>\r\n                  <RadioButton value={EXERCISE_TYPES.chord}>{t('chord')}</RadioButton>\r\n                  <RadioButton value={EXERCISE_TYPES.noteSequence}>{t('noteSequence')}</RadioButton>\r\n                </RadioGroup>\r\n              </FormItem>\r\n              {ut.isNoteSequenceExercise(test) && renderNoteSequenceTypeSelector(index)}\r\n              {ut.isRandomNoteSequenceExercise(test) && renderClefTypeSelector(index, test.clef, handleClefTypeChanged)}\r\n              {(ut.isIntervalOrChordExercise(test) || ut.isRandomNoteSequenceExercise(test)) && renderNoteRangeSelector(index, handleNoteRangeChanged, test[`${test.exerciseType}NoteRange`])}\r\n              {ut.isIntervalExercise(test) && renderIntervalSelector(test.intervalCheckboxStates, 'interval', index)}\r\n              {ut.isChordExercise(test) && renderChordSelector(index)}\r\n              {ut.isNoteSequenceExercise(test) && renderNoteSequenceSelector(test.numberOfNotes, index)}\r\n            </ItemPanel>\r\n          ))\r\n        }\r\n      </Form>\r\n\r\n      <Button type=\"primary\" icon={<PlusOutlined />} onClick={handleAddTestButtonClick}>\r\n        {t('earTraining:addTest')}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nPianoEditor.propTypes = {\r\n  ...sectionEditorProps\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
